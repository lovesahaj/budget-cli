syntax = "proto3";

package budget;

// Transaction service for managing financial transactions
service TransactionService {
  // Add a new transaction
  rpc AddTransaction(AddTransactionRequest) returns (TransactionResponse);

  // Update an existing transaction
  rpc UpdateTransaction(UpdateTransactionRequest) returns (UpdateTransactionResponse);

  // Delete a transaction
  rpc DeleteTransaction(DeleteTransactionRequest) returns (DeleteTransactionResponse);

  // Get a transaction by ID
  rpc GetTransaction(GetTransactionRequest) returns (TransactionResponse);

  // Get recent transactions
  rpc GetRecentTransactions(GetRecentTransactionsRequest) returns (TransactionListResponse);

  // Search transactions with filters
  rpc SearchTransactions(SearchTransactionsRequest) returns (TransactionListResponse);
}

// Budget service for viewing balances, categories, and spending
service BudgetService {
  // Get all balances
  rpc GetAllBalances(GetAllBalancesRequest) returns (BalanceListResponse);

  // Get balance for a specific type
  rpc GetBalance(GetBalanceRequest) returns (BalanceResponse);

  // Update balance
  rpc UpdateBalance(UpdateBalanceRequest) returns (UpdateBalanceResponse);

  // Get all categories
  rpc GetCategories(GetCategoriesRequest) returns (CategoryListResponse);

  // Add a new category
  rpc AddCategory(AddCategoryRequest) returns (AddCategoryResponse);

  // Get spending by category for a specific month
  rpc GetSpendingByCategory(GetSpendingByCategoryRequest) returns (SpendingByCategoryResponse);

  // Get daily spending for the last N days
  rpc GetDailySpending(GetDailySpendingRequest) returns (DailySpendingResponse);

  // Get spending limits
  rpc GetSpendingLimits(GetSpendingLimitsRequest) returns (SpendingLimitsResponse);

  // Set a spending limit
  rpc SetSpendingLimit(SetSpendingLimitRequest) returns (SetSpendingLimitResponse);

  // Check if spending limit is exceeded
  rpc CheckSpendingLimit(CheckSpendingLimitRequest) returns (CheckSpendingLimitResponse);
}

// Transaction messages
message Transaction {
  int32 id = 1;
  string type = 2;  // "cash" or "card"
  string card = 3;
  string category = 4;
  string description = 5;
  double amount = 6;
  string timestamp = 7;  // ISO format datetime string
}

message AddTransactionRequest {
  string type = 1;
  string card = 2;
  string description = 3;
  double amount = 4;
  string category = 5;
}

message TransactionResponse {
  bool success = 1;
  string message = 2;
  Transaction transaction = 3;
}

message UpdateTransactionRequest {
  int32 transaction_id = 1;
  optional string type = 2;
  optional string card = 3;
  optional string description = 4;
  optional double amount = 5;
  optional string category = 6;
}

message UpdateTransactionResponse {
  bool success = 1;
  string message = 2;
}

message DeleteTransactionRequest {
  int32 transaction_id = 1;
}

message DeleteTransactionResponse {
  bool success = 1;
  string message = 2;
}

message GetTransactionRequest {
  int32 transaction_id = 1;
}

message GetRecentTransactionsRequest {
  int32 limit = 1;  // Default 10
}

message TransactionListResponse {
  bool success = 1;
  string message = 2;
  repeated Transaction transactions = 3;
}

message SearchTransactionsRequest {
  string query = 1;
  string category = 2;
  string card = 3;
  string start_date = 4;
  string end_date = 5;
  optional double min_amount = 6;
  optional double max_amount = 7;
}

// Balance messages
message Balance {
  string type = 1;
  double amount = 2;
}

message GetAllBalancesRequest {}

message BalanceListResponse {
  bool success = 1;
  string message = 2;
  repeated Balance balances = 3;
}

message GetBalanceRequest {
  string balance_type = 1;
}

message BalanceResponse {
  bool success = 1;
  string message = 2;
  Balance balance = 3;
}

message UpdateBalanceRequest {
  string balance_type = 1;
  double amount = 2;
}

message UpdateBalanceResponse {
  bool success = 1;
  string message = 2;
}

// Category messages
message Category {
  int32 id = 1;
  string name = 2;
  string description = 3;
}

message GetCategoriesRequest {}

message CategoryListResponse {
  bool success = 1;
  string message = 2;
  repeated Category categories = 3;
}

message AddCategoryRequest {
  string name = 1;
  string description = 2;
}

message AddCategoryResponse {
  bool success = 1;
  string message = 2;
}

// Spending reports messages
message GetSpendingByCategoryRequest {
  int32 year = 1;
  int32 month = 2;
}

message CategorySpending {
  string category = 1;
  double amount = 2;
  double percentage = 3;  // Percentage of total spending
}

message SpendingByCategoryResponse {
  bool success = 1;
  string message = 2;
  repeated CategorySpending category_spending = 3;
  double total = 4;
}

message GetDailySpendingRequest {
  int32 days = 1;  // Default 30
}

message DailySpendingEntry {
  string date = 1;  // YYYY-MM-DD format
  double amount = 2;
}

message DailySpendingResponse {
  bool success = 1;
  string message = 2;
  repeated DailySpendingEntry daily_spending = 3;
}

// Spending limits messages
message SpendingLimit {
  int32 id = 1;
  string category = 2;
  string source = 3;
  double limit_amount = 4;
  string period = 5;  // "daily", "weekly", "monthly", "yearly"
}

message GetSpendingLimitsRequest {}

message SpendingLimitsResponse {
  bool success = 1;
  string message = 2;
  repeated SpendingLimit limits = 3;
}

message SetSpendingLimitRequest {
  double limit_amount = 1;
  string period = 2;
  string category = 3;
  string source = 4;
}

message SetSpendingLimitResponse {
  bool success = 1;
  string message = 2;
}

message CheckSpendingLimitRequest {
  string category = 1;
  string source = 2;
  string period = 3;
}

message LimitCheckResult {
  double current_spending = 1;
  double limit_amount = 2;
  bool is_exceeded = 3;
  double remaining = 4;
}

message CheckSpendingLimitResponse {
  bool success = 1;
  string message = 2;
  LimitCheckResult result = 3;
}
