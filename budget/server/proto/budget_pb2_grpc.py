# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from budget.server.proto import budget_pb2 as budget__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in budget_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TransactionServiceStub(object):
    """Transaction service for managing financial transactions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddTransaction = channel.unary_unary(
                '/budget.TransactionService/AddTransaction',
                request_serializer=budget__pb2.AddTransactionRequest.SerializeToString,
                response_deserializer=budget__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.UpdateTransaction = channel.unary_unary(
                '/budget.TransactionService/UpdateTransaction',
                request_serializer=budget__pb2.UpdateTransactionRequest.SerializeToString,
                response_deserializer=budget__pb2.UpdateTransactionResponse.FromString,
                _registered_method=True)
        self.DeleteTransaction = channel.unary_unary(
                '/budget.TransactionService/DeleteTransaction',
                request_serializer=budget__pb2.DeleteTransactionRequest.SerializeToString,
                response_deserializer=budget__pb2.DeleteTransactionResponse.FromString,
                _registered_method=True)
        self.GetTransaction = channel.unary_unary(
                '/budget.TransactionService/GetTransaction',
                request_serializer=budget__pb2.GetTransactionRequest.SerializeToString,
                response_deserializer=budget__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.GetRecentTransactions = channel.unary_unary(
                '/budget.TransactionService/GetRecentTransactions',
                request_serializer=budget__pb2.GetRecentTransactionsRequest.SerializeToString,
                response_deserializer=budget__pb2.TransactionListResponse.FromString,
                _registered_method=True)
        self.SearchTransactions = channel.unary_unary(
                '/budget.TransactionService/SearchTransactions',
                request_serializer=budget__pb2.SearchTransactionsRequest.SerializeToString,
                response_deserializer=budget__pb2.TransactionListResponse.FromString,
                _registered_method=True)


class TransactionServiceServicer(object):
    """Transaction service for managing financial transactions
    """

    def AddTransaction(self, request, context):
        """Add a new transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTransaction(self, request, context):
        """Update an existing transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTransaction(self, request, context):
        """Delete a transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransaction(self, request, context):
        """Get a transaction by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecentTransactions(self, request, context):
        """Get recent transactions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchTransactions(self, request, context):
        """Search transactions with filters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TransactionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTransaction,
                    request_deserializer=budget__pb2.AddTransactionRequest.FromString,
                    response_serializer=budget__pb2.TransactionResponse.SerializeToString,
            ),
            'UpdateTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTransaction,
                    request_deserializer=budget__pb2.UpdateTransactionRequest.FromString,
                    response_serializer=budget__pb2.UpdateTransactionResponse.SerializeToString,
            ),
            'DeleteTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTransaction,
                    request_deserializer=budget__pb2.DeleteTransactionRequest.FromString,
                    response_serializer=budget__pb2.DeleteTransactionResponse.SerializeToString,
            ),
            'GetTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransaction,
                    request_deserializer=budget__pb2.GetTransactionRequest.FromString,
                    response_serializer=budget__pb2.TransactionResponse.SerializeToString,
            ),
            'GetRecentTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecentTransactions,
                    request_deserializer=budget__pb2.GetRecentTransactionsRequest.FromString,
                    response_serializer=budget__pb2.TransactionListResponse.SerializeToString,
            ),
            'SearchTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchTransactions,
                    request_deserializer=budget__pb2.SearchTransactionsRequest.FromString,
                    response_serializer=budget__pb2.TransactionListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'budget.TransactionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('budget.TransactionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TransactionService(object):
    """Transaction service for managing financial transactions
    """

    @staticmethod
    def AddTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.TransactionService/AddTransaction',
            budget__pb2.AddTransactionRequest.SerializeToString,
            budget__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.TransactionService/UpdateTransaction',
            budget__pb2.UpdateTransactionRequest.SerializeToString,
            budget__pb2.UpdateTransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.TransactionService/DeleteTransaction',
            budget__pb2.DeleteTransactionRequest.SerializeToString,
            budget__pb2.DeleteTransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.TransactionService/GetTransaction',
            budget__pb2.GetTransactionRequest.SerializeToString,
            budget__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRecentTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.TransactionService/GetRecentTransactions',
            budget__pb2.GetRecentTransactionsRequest.SerializeToString,
            budget__pb2.TransactionListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.TransactionService/SearchTransactions',
            budget__pb2.SearchTransactionsRequest.SerializeToString,
            budget__pb2.TransactionListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class BudgetServiceStub(object):
    """Budget service for viewing balances, categories, and spending
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllBalances = channel.unary_unary(
                '/budget.BudgetService/GetAllBalances',
                request_serializer=budget__pb2.GetAllBalancesRequest.SerializeToString,
                response_deserializer=budget__pb2.BalanceListResponse.FromString,
                _registered_method=True)
        self.GetBalance = channel.unary_unary(
                '/budget.BudgetService/GetBalance',
                request_serializer=budget__pb2.GetBalanceRequest.SerializeToString,
                response_deserializer=budget__pb2.BalanceResponse.FromString,
                _registered_method=True)
        self.UpdateBalance = channel.unary_unary(
                '/budget.BudgetService/UpdateBalance',
                request_serializer=budget__pb2.UpdateBalanceRequest.SerializeToString,
                response_deserializer=budget__pb2.UpdateBalanceResponse.FromString,
                _registered_method=True)
        self.GetCategories = channel.unary_unary(
                '/budget.BudgetService/GetCategories',
                request_serializer=budget__pb2.GetCategoriesRequest.SerializeToString,
                response_deserializer=budget__pb2.CategoryListResponse.FromString,
                _registered_method=True)
        self.AddCategory = channel.unary_unary(
                '/budget.BudgetService/AddCategory',
                request_serializer=budget__pb2.AddCategoryRequest.SerializeToString,
                response_deserializer=budget__pb2.AddCategoryResponse.FromString,
                _registered_method=True)
        self.GetSpendingByCategory = channel.unary_unary(
                '/budget.BudgetService/GetSpendingByCategory',
                request_serializer=budget__pb2.GetSpendingByCategoryRequest.SerializeToString,
                response_deserializer=budget__pb2.SpendingByCategoryResponse.FromString,
                _registered_method=True)
        self.GetDailySpending = channel.unary_unary(
                '/budget.BudgetService/GetDailySpending',
                request_serializer=budget__pb2.GetDailySpendingRequest.SerializeToString,
                response_deserializer=budget__pb2.DailySpendingResponse.FromString,
                _registered_method=True)
        self.GetSpendingLimits = channel.unary_unary(
                '/budget.BudgetService/GetSpendingLimits',
                request_serializer=budget__pb2.GetSpendingLimitsRequest.SerializeToString,
                response_deserializer=budget__pb2.SpendingLimitsResponse.FromString,
                _registered_method=True)
        self.SetSpendingLimit = channel.unary_unary(
                '/budget.BudgetService/SetSpendingLimit',
                request_serializer=budget__pb2.SetSpendingLimitRequest.SerializeToString,
                response_deserializer=budget__pb2.SetSpendingLimitResponse.FromString,
                _registered_method=True)
        self.CheckSpendingLimit = channel.unary_unary(
                '/budget.BudgetService/CheckSpendingLimit',
                request_serializer=budget__pb2.CheckSpendingLimitRequest.SerializeToString,
                response_deserializer=budget__pb2.CheckSpendingLimitResponse.FromString,
                _registered_method=True)


class BudgetServiceServicer(object):
    """Budget service for viewing balances, categories, and spending
    """

    def GetAllBalances(self, request, context):
        """Get all balances
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalance(self, request, context):
        """Get balance for a specific type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBalance(self, request, context):
        """Update balance
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCategories(self, request, context):
        """Get all categories
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddCategory(self, request, context):
        """Add a new category
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSpendingByCategory(self, request, context):
        """Get spending by category for a specific month
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDailySpending(self, request, context):
        """Get daily spending for the last N days
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSpendingLimits(self, request, context):
        """Get spending limits
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSpendingLimit(self, request, context):
        """Set a spending limit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckSpendingLimit(self, request, context):
        """Check if spending limit is exceeded
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BudgetServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllBalances': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllBalances,
                    request_deserializer=budget__pb2.GetAllBalancesRequest.FromString,
                    response_serializer=budget__pb2.BalanceListResponse.SerializeToString,
            ),
            'GetBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalance,
                    request_deserializer=budget__pb2.GetBalanceRequest.FromString,
                    response_serializer=budget__pb2.BalanceResponse.SerializeToString,
            ),
            'UpdateBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBalance,
                    request_deserializer=budget__pb2.UpdateBalanceRequest.FromString,
                    response_serializer=budget__pb2.UpdateBalanceResponse.SerializeToString,
            ),
            'GetCategories': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCategories,
                    request_deserializer=budget__pb2.GetCategoriesRequest.FromString,
                    response_serializer=budget__pb2.CategoryListResponse.SerializeToString,
            ),
            'AddCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCategory,
                    request_deserializer=budget__pb2.AddCategoryRequest.FromString,
                    response_serializer=budget__pb2.AddCategoryResponse.SerializeToString,
            ),
            'GetSpendingByCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSpendingByCategory,
                    request_deserializer=budget__pb2.GetSpendingByCategoryRequest.FromString,
                    response_serializer=budget__pb2.SpendingByCategoryResponse.SerializeToString,
            ),
            'GetDailySpending': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDailySpending,
                    request_deserializer=budget__pb2.GetDailySpendingRequest.FromString,
                    response_serializer=budget__pb2.DailySpendingResponse.SerializeToString,
            ),
            'GetSpendingLimits': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSpendingLimits,
                    request_deserializer=budget__pb2.GetSpendingLimitsRequest.FromString,
                    response_serializer=budget__pb2.SpendingLimitsResponse.SerializeToString,
            ),
            'SetSpendingLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSpendingLimit,
                    request_deserializer=budget__pb2.SetSpendingLimitRequest.FromString,
                    response_serializer=budget__pb2.SetSpendingLimitResponse.SerializeToString,
            ),
            'CheckSpendingLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckSpendingLimit,
                    request_deserializer=budget__pb2.CheckSpendingLimitRequest.FromString,
                    response_serializer=budget__pb2.CheckSpendingLimitResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'budget.BudgetService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('budget.BudgetService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BudgetService(object):
    """Budget service for viewing balances, categories, and spending
    """

    @staticmethod
    def GetAllBalances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.BudgetService/GetAllBalances',
            budget__pb2.GetAllBalancesRequest.SerializeToString,
            budget__pb2.BalanceListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.BudgetService/GetBalance',
            budget__pb2.GetBalanceRequest.SerializeToString,
            budget__pb2.BalanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.BudgetService/UpdateBalance',
            budget__pb2.UpdateBalanceRequest.SerializeToString,
            budget__pb2.UpdateBalanceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCategories(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.BudgetService/GetCategories',
            budget__pb2.GetCategoriesRequest.SerializeToString,
            budget__pb2.CategoryListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.BudgetService/AddCategory',
            budget__pb2.AddCategoryRequest.SerializeToString,
            budget__pb2.AddCategoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSpendingByCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.BudgetService/GetSpendingByCategory',
            budget__pb2.GetSpendingByCategoryRequest.SerializeToString,
            budget__pb2.SpendingByCategoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDailySpending(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.BudgetService/GetDailySpending',
            budget__pb2.GetDailySpendingRequest.SerializeToString,
            budget__pb2.DailySpendingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSpendingLimits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.BudgetService/GetSpendingLimits',
            budget__pb2.GetSpendingLimitsRequest.SerializeToString,
            budget__pb2.SpendingLimitsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSpendingLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.BudgetService/SetSpendingLimit',
            budget__pb2.SetSpendingLimitRequest.SerializeToString,
            budget__pb2.SetSpendingLimitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckSpendingLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/budget.BudgetService/CheckSpendingLimit',
            budget__pb2.CheckSpendingLimitRequest.SerializeToString,
            budget__pb2.CheckSpendingLimitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
